import Head from "next/head";
import { api } from "~/utils/api";
import superjson from "superjson";
import { appRouter } from "~/server/api/root";
import { prisma } from "~/server/db";
import { GetStaticPaths, GetStaticProps, NextPage } from "next";
import { Wrapper } from "~/components/Wrapper";
import { createServerSideHelpers } from "@trpc/react-query/server";
import { ProfileFeed } from "~/components/ProfileFeed";

const Profile: NextPage<{id: string}> = ({ id }) => {
  const { data } = api.profile.getUserById.useQuery({ id })

  if (!data) {
    return <div>User does not exist</div>
  }

  return <>
    <Head>
      <title>{data.username}</title>
      <meta name="description" content="Generated by create-t3-app" />
      <link rel="icon" href="/favicon.ico" />
    </Head>
    <Wrapper>
        <div className="relative bg-slate-600 h-48">
          <img src={data.profileImageUrl} alt="" width={128} height={128} className="absolute -mb-[64px] bottom-0 rounded-full border-4 border-black left-0 ml-4 bg-black" />
        </div>
        <div className="h-[64px]" />
        <div className="p-4 text-2xl font-bold">{`@${data.username ?? ""}`}</div>

      <div className="w-full border-b border-slate-400" />

      <ProfileFeed userId={id} />
    </Wrapper>
  </>
}

export const getStaticProps: GetStaticProps = async (context) => {
  const ssg = createServerSideHelpers({
    router: appRouter,
    ctx: { prisma, userId: null },
    transformer: superjson
  })

  const slug = context.params?.slug

  if (typeof  slug !== "string") {
    throw new Error("no slug")
  }

  await ssg.profile.getUserById.prefetch({ id: slug })

  return {
    props: {
      trpcState: ssg.dehydrate(),
      id: slug
    }
  }
}

export const getStaticPaths: GetStaticPaths = () => {
  return {
    paths: [],
    fallback: "blocking"
  }
}

export default Profile